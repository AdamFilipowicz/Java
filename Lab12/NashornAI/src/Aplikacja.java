
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;

public class Aplikacja extends javax.swing.JFrame {
    private List playerLeftCards = new ArrayList<Integer>();
    private List computerLeftCards = new ArrayList<Integer>();
    
    private ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
    private Invocable invocable = null;
    
    private int playerPoints = 0;
    private int computerPoints = 0;
    
    private boolean blad = false;
    private boolean pcTurn = false;
    
    private boolean playerTurn;
    
    public Aplikacja() {
        initComponents();
        refreshPoints();
        nextTurnButton.setEnabled(false);
        pickCardButton.setEnabled(false);
        strategyBox.removeAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        playerCardList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        pickCardButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        range1Text = new javax.swing.JTextField();
        range2Text = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        endButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        playerButton = new javax.swing.JRadioButton();
        computerButton = new javax.swing.JRadioButton();
        turnText = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        computerPlayedCardText = new javax.swing.JTextField();
        label10 = new javax.swing.JLabel();
        label11 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        playerPlayedCardText = new javax.swing.JTextField();
        nextTurnButton = new javax.swing.JButton();
        plPoints = new javax.swing.JLabel();
        coPoints = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        computerCardList = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        seeCardsButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        strategyBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(playerCardList);

        jLabel1.setText("Lista kart gracza");

        pickCardButton.setText("Wybierz karte");
        pickCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickCardButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Podaj zakres liczbowy kart");

        jLabel3.setText("Od");

        jLabel4.setText("Do");

        startButton.setText("Rozpocznij gre");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        endButton.setText("Zakoncz gre");
        endButton.setEnabled(false);
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Wybierz strone rozpoczynajaca");

        playerButton.setText("Gracz");
        playerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerButtonActionPerformed(evt);
            }
        });

        computerButton.setText("Komputer");
        computerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computerButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Karta zagrana przez komputer");

        computerPlayedCardText.setEditable(false);
        computerPlayedCardText.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N

        label10.setText("Punkty zdobyte przez gracza: ");

        label11.setText("Punkty zdobyte przez komputer: ");

        jLabel7.setText("Karta zagrana przez gracza");

        playerPlayedCardText.setEditable(false);
        playerPlayedCardText.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N

        nextTurnButton.setText("Nastepna tura");
        nextTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTurnButtonActionPerformed(evt);
            }
        });

        computerCardList.setEnabled(false);
        jScrollPane2.setViewportView(computerCardList);

        jLabel8.setText("Lista kart komputera");

        seeCardsButton.setText("Wylacz podglad");
        seeCardsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeCardsButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Wybierz strategie komputera");

        strategyBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                strategyBoxMouseClicked(evt);
            }
        });
        strategyBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strategyBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(seeCardsButton)
                            .addComponent(jLabel8)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(strategyBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(turnText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(169, 169, 169)
                                        .addComponent(coPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label11)
                                        .addGap(40, 40, 40))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(plPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nextTurnButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4))
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(range1Text, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(range2Text, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(playerButton)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addComponent(computerButton))))
                                    .addComponent(jLabel5)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(computerPlayedCardText, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(playerPlayedCardText, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startButton)
                                    .addComponent(endButton))))
                        .addGap(65, 65, 65)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(126, 126, 126))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pickCardButton)
                        .addGap(116, 116, 116))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(computerPlayedCardText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addComponent(playerPlayedCardText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(turnText, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(label11))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(plPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(coPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(nextTurnButton)))
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seeCardsButton)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(playerButton)
                            .addComponent(strategyBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(range1Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(range2Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(computerButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pickCardButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endButton)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if(!computerButton.isSelected() && !playerButton.isSelected()){
            showError("wybierz kto rozpocznie gre");
            return;
        }
        else if(computerButton.isSelected())
            playerTurn=false;
        else
            playerTurn=true;
        try{
            int i=initCardList(Integer.parseInt(range1Text.getText()), Integer.parseInt(range2Text.getText()));
            if(i==100){
                showError("Podano bledny zakres liczbowy");
            }
            if(i==101){
                showError("Liczby zakresu musza byc mniejsze od 10000 i wieksze od -1000");
            }
            if(i==1){
                showMsg("Gra rozpoczeta");
                if(playerTurn){
                    turnText.setText("Tura gracza");
                    pcTurn = false;
                    pickCardButton.setEnabled(true);
                }
                else{
                    turnText.setText("Tura komputera");
                    pcTurn = true;
                    pcTurn();
                }
            }
        }
        catch(Exception e){
            showError("Podaj liczby calkowite");
            return;
        }
        startButton.setEnabled(false);
        endButton.setEnabled(true);
    }//GEN-LAST:event_startButtonActionPerformed

    private void pcTurn(){
        pickCardButton.setEnabled(false);
        
        if(invocable==null){
            showError("Nie zostal wybrany zaden algorytm lub zostal usuniety");
            blad=true;
            return;
        }
        Object result = null;
        try {
            String str = tabToString(computerListToTab());
            String str2 = tabToString(playerListToTab());
            int playerCardd = 0;
            if(!pcTurn)
                playerCardd = Integer.parseInt(playerPlayedCardText.getText());
            result = invocable.invokeFunction("algorytm", str, str2, pcTurn, playerCardd);
        } catch (Exception ex) {
            showError("Bledne wywolanie funkcji");
            blad=true;
            return;
        }
        
        int cardID = (int) Double.parseDouble(result.toString());
        int playedCard = Integer.parseInt((String)computerLeftCards.get(cardID));
        computerLeftCards.remove(cardID);
        String[] listData2 =computerListToTab();
        computerCardList.setListData(listData2);
        computerPlayedCardText.setText(Integer.toString(playedCard));
        if(playerPlayedCardText.getText()!=null && !playerPlayedCardText.getText().equals("")){
            //zatem komputer odpowiedzial na ture gracza
            pcTurn = true;
            calculatePoints();
            refreshPoints();
            nextTurnButton.setEnabled(true);
        }
        else{
            //komputer zaczal ture
            pcTurn = false;
            turnText.setText("Tura gracza");
            pickCardButton.setEnabled(true);
        }
        if(playerLeftCards.isEmpty())
            endGame();
    }
    
    private void endButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endButtonActionPerformed
        String[] listData = new String[10];
        for(int i=0;i<10;i++)
            listData[i]="";
        playerCardList.setListData(listData);
        computerCardList.setListData(listData);
        endButton.setEnabled(false);
        startButton.setEnabled(true);
        playerPoints = 0;
        computerPoints = 0;
        playerPlayedCardText.setText("");
        computerPlayedCardText.setText("");
        refreshPoints();
    }//GEN-LAST:event_endButtonActionPerformed

    private void computerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computerButtonActionPerformed
        playerButton.setSelected(false);
    }//GEN-LAST:event_computerButtonActionPerformed

    private void playerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerButtonActionPerformed
        computerButton.setSelected(false);
    }//GEN-LAST:event_playerButtonActionPerformed

    private void pickCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickCardButtonActionPerformed
        if(!playerCardList.isSelectionEmpty()){
            if(playerCardList.getSelectedValue()!=null && !playerCardList.getSelectedValue().equals("")){
                playerPlay(playerCardList.getSelectedValue());
            }
        }
    }//GEN-LAST:event_pickCardButtonActionPerformed

    private void nextTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextTurnButtonActionPerformed
        nextTurnButton.setEnabled(false);
        pickCardButton.setEnabled(false);
        playerPlayedCardText.setText("");
        computerPlayedCardText.setText("");
        if(turnText.getText().equals("Tura komputera"))
            pcTurn();
        else
            pickCardButton.setEnabled(true);
    }//GEN-LAST:event_nextTurnButtonActionPerformed

    private void seeCardsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeCardsButtonActionPerformed
        if(seeCardsButton.getText().equals("Wylacz podglad")){
            String[] listData = new String[10];
            for(int i=0;i<10;i++)
                listData[i]="";
            computerCardList.setListData(listData);
            seeCardsButton.setText("Wlacz podglad");
        }
        else if(seeCardsButton.getText().equals("Wlacz podglad")){
            String[] listData2 =computerListToTab();
            computerCardList.setListData(listData2);
            seeCardsButton.setText("Wylacz podglad");
        }
    }//GEN-LAST:event_seeCardsButtonActionPerformed

    private void strategyBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strategyBoxActionPerformed
        loadStrategy();
    }//GEN-LAST:event_strategyBoxActionPerformed

    private void loadStrategy(){
        if(strategyBox.getSelectedItem()!=null){
            String sel = strategyBox.getSelectedItem().toString();
            File strategy = new File("src/Strategies/"+sel+".js");
            if(strategy.exists()){
                try {
                    engine.eval(new FileReader("src/Strategies/"+sel+".js"));
                    invocable = (Invocable) engine;
                    return;
                } catch (Exception ex) {
                    showError("Blad odczytu pliku");
                    invocable = null;
                    return;
                }
                finally{
                    if(blad){
                        blad=false;
                        pcTurn();
                    }
                }
            }
        }
        invocable = null;
    }
    
    private void strategyBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_strategyBoxMouseClicked
        strategyBox.removeAllItems();
        File dir = new File("src/Strategies");
        File[] directoryListing = dir.listFiles();
        String filename;
        if (directoryListing != null) {
            for (File strategy : directoryListing) {
                filename = strategy.getName().toString();
                if(filename.substring(filename.length()-3).equals(".js"))
                    strategyBox.addItem(filename.substring(0,filename.length()-3));
            }
        }
    }//GEN-LAST:event_strategyBoxMouseClicked

    private void playerPlay(String number){
        playerPlayedCardText.setText(number);
        int i = playerLeftCards.indexOf((Object)number);
        playerLeftCards.remove(i);
        String[] listData = playerListToTab();
        playerCardList.setListData(listData);
        if(computerPlayedCardText.getText()!=null && !computerPlayedCardText.getText().equals("")){
            //zatem gracz odpowiedzial na ture komputera
            pcTurn = true;
            calculatePoints();
            refreshPoints();
            nextTurnButton.setEnabled(true);
            pickCardButton.setEnabled(false);
        }
        else{
            //gracz zaczal ture
            pcTurn = false;
            turnText.setText("Tura komputera");
            pcTurn();
        }
        if(playerLeftCards.isEmpty())
            endGame();
    }
    
    private int initCardList(int from, int to){
        playerLeftCards.clear();
        computerLeftCards.clear();
        if(to<from)
            return 100;
        if(to>=10000 || from >=10000 || to<=-1000 || from<=-1000)
            return 101;
        Random r = new Random();
        int j;
        for(int i=0;i<10;i++){
            j = r.nextInt(to-from+1) + from;
            playerLeftCards.add(Integer.toString(j));
            computerLeftCards.add(Integer.toString(j));
        }
        String[] listData = playerListToTab();
        playerCardList.setListData(listData);
        String[] listData2 =computerListToTab();
        computerCardList.setListData(listData2);
        return 1;
    }
    
    private String[] playerListToTab(){
        String[] listData = new String[10];
        for(int i=0;i<playerLeftCards.size();i++)
            listData[i]=(String)playerLeftCards.get(i);
        return listData;
    }
    
    private String[] computerListToTab(){
        String[] listData = new String[10];
        for(int i=0;i<computerLeftCards.size();i++)
            listData[i]=(String)computerLeftCards.get(i);
        return listData;
    }
    
    private String tabToString(String[] tab){
        int k;
        String s = "";

        k = tab.length;
        s = tab[0];
        for (int i= 1 ; i < k; i++) {
            if(tab[i]!=null && !tab[i].equals(""))
                s += "|" + tab[i];
        }
        return s;
    }
    
    private void calculatePoints(){
        if(Integer.parseInt(computerPlayedCardText.getText())>Integer.parseInt(playerPlayedCardText.getText()))
            computerPoints+=2;
        else if(Integer.parseInt(computerPlayedCardText.getText())==Integer.parseInt(playerPlayedCardText.getText())){
            computerPoints++;
            playerPoints++;
        }
        else
            playerPoints+=2;
    }
    
    private void endGame(){
        nextTurnButton.setEnabled(false);
        pickCardButton.setEnabled(false);
        if(Integer.parseInt(plPoints.getText())>Integer.parseInt(coPoints.getText()))
            turnText.setText("Gratulacje, wygrales z komputerem");
        else if(Integer.parseInt(plPoints.getText())==Integer.parseInt(coPoints.getText()))
            turnText.setText("Zremisowales z komputerem");
        else
            turnText.setText("Przegrales z komputerem");
    }
    
    private void refreshPoints(){
        plPoints.setText(Integer.toString(playerPoints));
        coPoints.setText(Integer.toString(computerPoints));
    }
    
    private boolean showError(String message){
        JOptionPane.showMessageDialog(null, message, "",JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    private void showMsg(String message){
        JOptionPane.showMessageDialog(null, message);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Aplikacja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Aplikacja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Aplikacja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aplikacja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Aplikacja().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel coPoints;
    private javax.swing.JRadioButton computerButton;
    private javax.swing.JList<String> computerCardList;
    private javax.swing.JTextField computerPlayedCardText;
    private javax.swing.JButton endButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label10;
    private javax.swing.JLabel label11;
    private javax.swing.JButton nextTurnButton;
    private javax.swing.JButton pickCardButton;
    private javax.swing.JLabel plPoints;
    private javax.swing.JRadioButton playerButton;
    private javax.swing.JList<String> playerCardList;
    private javax.swing.JTextField playerPlayedCardText;
    private javax.swing.JTextField range1Text;
    private javax.swing.JTextField range2Text;
    private javax.swing.JButton seeCardsButton;
    private javax.swing.JButton startButton;
    private javax.swing.JComboBox<String> strategyBox;
    private javax.swing.JLabel turnText;
    // End of variables declaration//GEN-END:variables
}