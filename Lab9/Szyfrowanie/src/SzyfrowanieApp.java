import java.io.*;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.*;
import javax.swing.JOptionPane;

public class SzyfrowanieApp extends javax.swing.JFrame {
    
    private Object krypto;
    
    private KeyPair pair;
    private PrivateKey privateKey;
    private PublicKey publicKey;
    
    private Class alg;
    private Method[] methods;
    private Field[] fields;
    
    public SzyfrowanieApp(){
        initComponents();
        
        JarLoader jl = new JarLoader("file:///C:/Adam/Kryptografia/target/", Szyfrowanie.class.getClassLoader());
        jl.readJarFile("Kryptografia-1.0-SNAPSHOT-jar-with-dependencies.jar");
        Class klasaKrypto = jl.findClass("Kryptografia");
        Object kryptografia;
        try {
            kryptografia = klasaKrypto.newInstance();
        } catch (Exception ex) {return;}
        
        try {
            krypto = kryptografia;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "", JOptionPane.ERROR_MESSAGE);
        }
        alg = krypto.getClass();
        methods = alg.getMethods();
        try{
            stworzKlucze();
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "", JOptionPane.ERROR_MESSAGE);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        decryptPath = new javax.swing.JTextField();
        decryptPath2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        decryptButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        encryptPath2 = new javax.swing.JTextField();
        encryptPath = new javax.swing.JTextField();
        encryptButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Sciezka pliku zaszyfrowanego");

        jLabel2.setText("Sciezka pliku rozszyfrowanego");

        decryptButton.setText("Rozszyfruj");
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Sciezka pliku nie zaszyfrowanego");

        jLabel4.setText("Sciezka pliku zaszyfrowanego");

        encryptButton.setText("Zaszyfruj");
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(decryptPath)
                            .addComponent(decryptPath2, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(decryptButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(encryptPath)
                                    .addComponent(encryptPath2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(210, 210, 210)
                                .addComponent(encryptButton)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptPath2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decryptButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptPath2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encryptButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
        if(decryptPath.getText().equals("") || decryptPath.getText()==null)
            JOptionPane.showMessageDialog(null, "Sciezka pliku zaszyfrowanego nie moze byc pusta", "", JOptionPane.ERROR_MESSAGE);
        else if(decryptPath2.getText().equals("") || decryptPath2.getText()==null) 
            JOptionPane.showMessageDialog(null, "Sciezka pliku rozszyfrowanego nie moze byc pusta", "", JOptionPane.ERROR_MESSAGE);
        else if(!new File(decryptPath.getText()).exists())
            JOptionPane.showMessageDialog(null, "Podany plik zaszyfrowany nie istnieje", "", JOptionPane.ERROR_MESSAGE);
        else if(new File(decryptPath.getText()).isDirectory())
            JOptionPane.showMessageDialog(null, "Podano katalog zamiast pliku zaszyfrowanego", "", JOptionPane.ERROR_MESSAGE);
        else if(new File(decryptPath2.getText()).exists())
            JOptionPane.showMessageDialog(null, "Istnieje juz plik o podanej nazwie do odszyfrowania", "", JOptionPane.ERROR_MESSAGE);
        else if(new File(decryptPath2.getText()).isDirectory())
            JOptionPane.showMessageDialog(null, "Podano katalog zamiast sciezki do pliku do rozszyfrowania", "", JOptionPane.ERROR_MESSAGE);
        else{
            Path file = Paths.get(encryptPath2.getText());
            try {
                FileInputStream sigfos = new FileInputStream("sig");
                byte[] encKey = new byte[sigfos.available()];  
                sigfos.read(encKey);
                sigfos.close();
                for(int i=0;i<methods.length;i++){
                    if(methods[i].getName().equals("getFileInBytes")){
                        Object ret = methods[i].invoke(krypto,new File(decryptPath.getText()));
                        for(int j=0;j<methods.length;j++){
                            if(methods[j].getName().equals("decryptFile")){
                                methods[j].invoke(krypto,(byte[])ret, new File(decryptPath2.getText()), getPublicKey());
                                break;
                            }
                        }
                        break;
                    }
                }
                
                //kr.decryptFile(kr.getFileInBytes(new File(decryptPath.getText())), new File(decryptPath2.getText()), getPublicKey());
                String msg = readFromFile(decryptPath2.getText());
                JOptionPane.showMessageDialog(null, "Wiadomosc zostala odszyfrowana");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_decryptButtonActionPerformed

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        if(encryptPath.getText().equals("") || encryptPath.getText()==null)
            JOptionPane.showMessageDialog(null, "Sciezka pliku nie zaszyfrowanego nie moze byc pusta", "", JOptionPane.ERROR_MESSAGE);
        else if(encryptPath2.getText().equals("") || encryptPath2.getText()==null) 
            JOptionPane.showMessageDialog(null, "Sciezka pliku zaszyfrowanego nie moze byc pusta", "", JOptionPane.ERROR_MESSAGE);
        else if(!new File(encryptPath.getText()).exists())
            JOptionPane.showMessageDialog(null, "Podany plik zaszyfrowany nie istnieje", "", JOptionPane.ERROR_MESSAGE);
        else if(new File(encryptPath.getText()).isDirectory())
            JOptionPane.showMessageDialog(null, "Podano katalog zamiast pliku zaszyfrowanego", "", JOptionPane.ERROR_MESSAGE);
        else if(new File(encryptPath2.getText()).exists())
            JOptionPane.showMessageDialog(null, "Istnieje juz plik o podanej nazwie do odszyfrowania", "", JOptionPane.ERROR_MESSAGE);
        else if(new File(encryptPath2.getText()).isDirectory())
            JOptionPane.showMessageDialog(null, "Podano katalog zamiast sciezki do pliku do rozszyfrowania", "", JOptionPane.ERROR_MESSAGE);
        else{
            Path file = Paths.get(encryptPath2.getText());
            try {
		String msg = readFromFile(encryptPath.getText());
                for(int i=0;i<methods.length;i++){
                    if(methods[i].getName().equals("sign")){
                        Object ret = methods[i].invoke(krypto, msg, getPrivateKey());
                        break;
                    }
                }
                
		//String encrypted_msg = kr.sign(msg, getPrivateKey());

                for(int i=0;i<methods.length;i++){
                    if(methods[i].getName().equals("getFileInBytes")){
                        Object ret = methods[i].invoke(krypto,new File(encryptPath.getText()));
                        for(int j=0;j<methods.length;j++){
                            if(methods[j].getName().equals("encryptFile")){
                                methods[j].invoke(krypto,(byte[])ret, new File(encryptPath2.getText()), getPrivateKey());
                                break;
                            }
                        }
                        break;
                    }
                }
                
		//kr.encryptFile(kr.getFileInBytes(new File(encryptPath.getText())), new File(encryptPath2.getText()), getPrivateKey());
                JOptionPane.showMessageDialog(null, "Wiadomosc zostala zaszyfrowana");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_encryptButtonActionPerformed

    public String readFromFile(String fileName) throws Exception{
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        String line = "";
        String cvsSplitBy = ";";
        StringBuilder sb = new StringBuilder();
        while ((line = br.readLine()) != null && !line.equals("")) {
            sb.append(line);
        }
        sb.append("\n");
        return sb.toString();
    }
    
    public void stworzKlucze() throws Exception {
        for(int i=0;i<methods.length;i++){
            if(methods[i].getName().equals("getKeyPairFromKeyStore")){
                Object ret = methods[i].invoke(krypto);
                pair = (KeyPair)ret;
                break;
            }
        }
        //pair = kr.getKeyPairFromKeyStore();
        
        this.privateKey = pair.getPrivate();
        this.publicKey = pair.getPublic();
    }

    public PrivateKey getPrivateKey() {
        return this.privateKey;
    }

    public PublicKey getPublicKey() {
        return this.publicKey;
    }

    public void zapiszDoPliku(String path, byte[] key) throws IOException {
        File f = new File(path);
        f.getParentFile().mkdirs();

        FileOutputStream fos = new FileOutputStream(f);
        fos.write(key);
        fos.flush();
        fos.close();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SzyfrowanieApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SzyfrowanieApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SzyfrowanieApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SzyfrowanieApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SzyfrowanieApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton decryptButton;
    private javax.swing.JTextField decryptPath;
    private javax.swing.JTextField decryptPath2;
    private javax.swing.JButton encryptButton;
    private javax.swing.JTextField encryptPath;
    private javax.swing.JTextField encryptPath2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
